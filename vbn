#!/data/data/com.termux/files/usr/bin/bash -e

#######################################################################
# Script Name: vbn                                                    #
# Description: It is used to manage VMS.                              #
# Author: Yi ming                                                     #
# Date: April 18, 2024                                                #
# Version: 0.1                                                        #
# Home: api.wer.plus                                                  #
# Github: github.com/HG-ha                                            #
# QQ Group: 376957298                                                 #
#######################################################################

# ADAPTS to termux and other linux
# 适配termux和其他Linux
check_command() {
    commands=("qemu-system-x86_64" "jq" "qemu-img" "wget")
    if [ ! -z $TERMUX_VERSION ]; then
        for cmd in "${commands[@]}"; do
            if ! command -v ${cmd} &> /dev/null; then
                pkg install qemu-system-x86-64-headless qemu-utils jq wget -y
            fi
        done
    else
        distro=$(cat /etc/os-release | grep '^ID=' | cut -d'=' -f2 | tr -d '"')
        case "$distro" in
            "ubuntu" | "debian")
                if ! command -v qemu-system-x86_64 &> /dev/null; then
                    echo "Please manually install qemu-system-x86 64 and then use it"
                    exit 1
                fi
                ;;
            "centos" | "rhel")
                for cmd in "${commands[@]}"; do
                    if ! command -v ${cmd} &> /dev/null; then
                        yum install epel-release -y
                        yum install qemu-kvm qemu-system-x86.x86_64 qemu-img.x86_64 jq wget -y
                        exit 1
                    fi
                done
                ;;
            "alpine")
                if ! command -v qemu-system-x86_64 &> /dev/null; then
                    echo "Please manually install qemu-system-x86 64 and then use it"
                    exit 1
                fi
                ;;
            *)
                echo "For Linux that is not supported, please manually install dependencies: jq, wget"
                exit 1
                ;;
        esac
    fi
}

# github domestic proxy
github_proxy="https://hub.gitmirror.com/"
vbn_download_url="https://raw.githubusercontent.com/HG-ha/Termux_virts/main/vbn"

# Virtual machine list
# 存储虚拟机的信息
vmlist='{
    "centos7":{
        "iso": "CentOS-7-x86_64-Everything-2009.iso",
        "filename": "centos7-x86_64-2009.qcow2",
        "install": "Minimal Installation",
        "installed_by": "Yi ming",
        "allocation_size": "40G",
        "actual_size": "1.62G",
        "format": "qcow2",
        "username": "root",
        "password": "123456",
        "download": "wget -O ${HOME}/.vbn_vms/centos7-x86_64-2009.qcow2 --no-check-certificate https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBa3JXZC0wWnV1b3B3eHh1Vm5jU3YyV09rdlVr",
        "notes": "请使用vnc或ssh连接\n\n\t在字符模式下界面将无法正常显示\n\t默认vnc方式启动\n\n\t若要上网请修改dns文件: /etc/resolv.conf\n\n\t默认暴露22端口到宿主机18022端口\n\t外部ssh命令: ssh root@127.0.0.1 -p 18022",
        "hostfwd": "tcp::18022-:22",
        "default_command": "qemu-system-x86_64 -m 1G -smp 2 -netdev user,id=n1,hostfwd=tcp::18022-:22 -device virtio-net,netdev=n1 -hda ${HOME}/.vbn_vms/centos7-x86_64-2009.qcow2",
        "custom_command": "qemu-system-x86_64 -hda ${HOME}/.vbn_vms/centos7-x86_64-2009.qcow2 "
    },"alpine319":{
        "iso": "alpine-virt-3.19.1-x86_64.iso",
        "filename": "alpine-3.19.1-x86_64.qcow2",
        "install": "default",
        "installed_by": "Yi ming",
        "allocation_size": "40G",
        "actual_size": "378M",
        "format": "qcow2",
        "username": "root",
        "password": "123456",
        "download": "wget -O ${HOME}/.vbn_vms/alpine-3.19.1-x86_64.qcow2 --no-check-certificate https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBa3JXZC0wWnV1b3B3eG1nTS1SSmhqNEczS0g5",
        "notes": "纯净的alpine3.19系统\n\n\t默认暴露22端口到宿主机18022端口\n\t外部ssh命令: ssh root@127.0.0.1 -p 18022",
        "hostfwd": "tcp::18022-:22",
        "default_command": "qemu-system-x86_64 -m 1G -smp 2 -nographic -netdev user,id=n1,hostfwd=tcp::18022-:22 -device virtio-net,netdev=n1 -hda ${HOME}/.vbn_vms/alpine-3.19.1-x86_64.qcow2",
        "custom_command": "qemu-system-x86_64 -hda ${HOME}/.vbn_vms/alpine-3.19.1-x86_64.qcow2 "
    },"alpine318":{
        "iso": "alpine-virt-3.18.0-x86_64.iso",
        "filename": "alpine-3.18.0-x86_64.qcow2",
        "install": "default",
        "installed_by": "Yi ming",
        "allocation_size": "40G",
        "actual_size": "92M",
        "format": "qcow2",
        "username": "root",
        "password": "alpine",
        "download": "wget -O ${HOME}/.vbn_vms/alpine-3.18.0-x86_64.qcow2 --no-check-certificate https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBa3JXZC0wWnV1b3B3eHBqRG54Q0xGYzlyRHgz",
        "notes": "纯净的alpine3.18系统\n\n\t默认暴露22端口到宿主机18022端口\n\t外部ssh命令: ssh root@127.0.0.1 -p 18022",
        "hostfwd": "tcp::18022-:22",
        "default_command": "qemu-system-x86_64 -m 1G -smp 2 -nographic -netdev user,id=n1,hostfwd=tcp::18022-:22 -device virtio-net,netdev=n1 -hda ${HOME}/.vbn_vms/alpine-3.18.0-x86_64.qcow2",
        "custom_command": "qemu-system-x86_64 -hda ${HOME}/.vbn_vms/alpine-3.18.0-x86_64.qcow2 "
    },"docker_alpine318":{
        "iso": "alpine-virt-3.18.0-x86_64.iso",
        "filename": "docker_alpine-3.18.0-x86_64.qcow2",
        "install": "default, docker",
        "installed_by": "Yi ming",
        "allocation_size": "40G",
        "actual_size": "368M",
        "format": "qcow2",
        "username": "root",
        "password": "alpine",
        "download": "wget -O ${HOME}/.vbn_vms/docker_alpine-3.18.0-x86_64.qcow2 --no-check-certificate https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBa3JXZC0wWnV1b3B3eVRCOHdJRTBVUzktV2lQ",
        "notes": "安装了docker的alpine3.18\n\n\t默认暴露22端口到宿主机18022端口\n\t外部ssh命令: ssh root@127.0.0.1 -p 18022",
        "hostfwd": "tcp::18022-:22",
        "default_command": "qemu-system-x86_64 -m 1G -smp 2 -nographic -netdev user,id=n1,hostfwd=tcp::18022-:22 -device virtio-net,netdev=n1 -hda ${HOME}/.vbn_vms/docker_alpine-3.18.0-x86_64.qcow2",
        "custom_command": "qemu-system-x86_64 -hda ${HOME}/.vbn_vms/docker_alpine-3.18.0-x86_64.qcow2 "
    },"xiaoya":{
        "iso": "alpine-virt-3.18.0-x86_64.iso",
        "filename": "xiaoya.qcow2",
        "install": "default, docker, xiaoya_alist",
        "installed_by": "Yi ming",
        "allocation_size": "40G",
        "actual_size": "823M",
        "format": "qcow2",
        "username": "root",
        "password": "alpine",
        "download": "wget -O ${HOME}/.vbn_vms/xiaoya.qcow2 --no-check-certificate https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBa3JXZC0wWnV1b3B3eXBhRzhSU0F6RHl4RXdj",
        "notes": "安装了xiaoya_alist，第一次使用需要配置token等\n\t启动或更新xiaoya：登陆后直接输入 xiaoya 并回车进行配置\n\t然后输入：docker restart xiaoya重建索引\n\t访问xiaoya：http://127.0.0.1:5678\n\t外部ssh命令: ssh root@127.0.0.1 -p 18022",
        "hostfwd": "tcp::18022-:22, tcp::5678-:5678",
        "default_command": "qemu-system-x86_64 -m 1G -smp 2 -nographic -netdev user,id=n1,hostfwd=tcp::18022-:22,hostfwd=tcp::5678-:5678 -device virtio-net,netdev=n1 -hda ${HOME}/.vbn_vms/xiaoya.qcow2",
        "custom_command": "qemu-system-x86_64 -hda ${HOME}/.vbn_vms/xiaoya.qcow2 "
    },"qwenapi_alpine318":{
        "iso": "alpine-virt-3.18.0-x86_64.iso",
        "filename":"qwenapi_alpine-3.18.0-x86_64.qcow2",
        "install": "default, qwen-free-api",
        "installed_by": "Yi ming",
        "allocation_size": "40G",
        "actual_size": "464M",
        "format": "qcow2",
        "username": "root",
        "password": "alpine",
        "download": "wget -O ${HOME}/.vbn_vms/qwenapi_alpine-3.18.0-x86_64.qcow2 --no-check-certificate https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBa3JXZC0wWnV1b3B3eVlra01tZ01iYXFxb3JD",
        "notes": "部署了通义千问api的alpine3.18\n\n\t接口文档：https://github.com/LLM-Red-Team/qwen-free-api\n\n\t通义千问外部接口：http://127.0.0.1:18000\n\n\t外部ssh命令: ssh root@127.0.0.1 -p 18022",
        "hostfwd": "tcp::18022-:22,tcp::18000-:8000",
        "default_command": "qemu-system-x86_64 -m 1G -smp 2 -nographic -netdev user,id=n1,hostfwd=tcp::18022-:22,hostfwd=tcp::18000-:8000 -device virtio-net,netdev=n1 -hda ${HOME}/.vbn_vms/qwenapi_alpine-3.18.0-x86_64.qcow2",
        "custom_command": "qemu-system-x86_64 -hda ${HOME}/.vbn_vms/qwenapi_alpine-3.18.0-x86_64.qcow2 "
    },"bt_centos7":{
        "iso": "CentOS-7-x86_64-Everything-2009.iso",
        "filename": "bt_centos7-x86_64-2009.qcow2",
        "install": "Minimal Installation, bt_panel_v8.0.6",
        "installed_by": "Yi ming",
        "allocation_size": "40G",
        "actual_size": "2.7G",
        "format": "qcow2",
        "username": "root",
        "password": "123456",
        "download": "wget -O ${HOME}/.vbn_vms/bt_centos7-x86_64-2009.qcow2 --no-check-certificate https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBa3JXZC0wWnV1b3B3eGYxNW1GdC0zemNJTzhx",
        "notes": "安装了宝塔8.0.6版本的centos7\n\n\t面板地址: http://127.0.0.1:25479/ed978faa\n\tbt_username: yiming\n\tbt_password: yiming\n\t运行宝塔: bt 3\n\n\t请使用vnc或ssh连接\n\t在字符模式下界面将无法正常显示\n\n\t默认vnc方式启动\n\n\t若要上网请修改dns文件/etc/resolv.conf\n\n\t默认暴露22端口到宿主机18022端口\n\t外部ssh命令: ssh root@127.0.0.1 -p 18022",
        "hostfwd": "tcp::18022-:22, tcp::25479-:25479",
        "default_command": "qemu-system-x86_64 -m 2G -smp 2 -netdev user,id=n1,hostfwd=tcp::18022-:22,hostfwd=tcp::25479-:25479 -device virtio-net,netdev=n1 -hda ${HOME}/.vbn_vms/bt_centos7-x86_64-2009.qcow2",
        "custom_command": "qemu-system-x86_64 -hda ${HOME}/.vbn_vms/bt_centos7-x86_64-2009.qcow2 "
    },"bt_alpine318":{
        "iso": "alpine-virt-3.18.0-x86_64.iso",
        "filename": "bt_alpine-3.18.0-x86_64.qcow2",
        "install": "default, bt_panel_v8.0.6",
        "installed_by": "Yi ming",
        "allocation_size": "40G",
        "actual_size": "1.3G",
        "format": "qcow2",
        "username": "root",
        "password": "alpine",
        "download": "wget -O ${HOME}/.vbn_vms/bt_alpine-3.18.0-x86_64.qcow2 --no-check-certificate https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBa3JXZC0wWnV1b3B3eGo0ZFVJaGVCZFNtbHZ6",
        "notes": "安装了宝塔8.0.6版本的alpine3.18\n\n\t面板地址: http://127.0.0.1:11306/eaeab87a\n\tbt_username: oqlsnrhi\n\tbt_password: 71e1f417\n\t运行宝塔: bt 3\n\n\t默认暴露22端口到宿主机18022端口\n\t外部ssh命令: ssh root@127.0.0.1 -p 18022",
        "hostfwd": "tcp::18022-:22, tcp::11306-:11306",
        "default_command": "qemu-system-x86_64 -m 1G -smp 2 -nographic -netdev user,id=n1,hostfwd=tcp::18022-:22,hostfwd=tcp::11306-:11306 -device virtio-net,netdev=n1 -hda ${HOME}/.vbn_vms/bt_alpine-3.18.0-x86_64.qcow2",
        "custom_command": "qemu-system-x86_64 -hda ${HOME}/.vbn_vms/bt_alpine-3.18.0-x86_64.qcow2 "
    },"kali":{
        "iso": "kali nethunter-rootless 2024.1",
        "filename": "",
        "install": "",
        "installed_by": "Yi ming",
        "allocation_size": "",
        "actual_size": "11G",
        "format": "",
        "username": "",
        "password": "",
        "download": "wget -O ${HOME}/kali-arm64.tgz --no-check-certificate https://dlink.host/1drv/aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBa3JXZC0wWnV1b3B3eWh4bHB5YTRqY1ZaaDZS && tar -zxf ${HOME}/kali-arm64.tgz && rm -f ${HOME}/kali-arm64.tgz && wget -O $PREFIX/bin/nethunter --no-check-certificate https://1drv.ms/u/s\\!AkrWd-0Zuuopwyn-zSz0k3okLQMA && chmod +x $PREFIX/bin/nethunter && cp $PREFIX/bin/nethunter $PREFIX/bin/nh",
        "notes": "kali官方的Termux nethunter 2024.1版本\n\n\t不支持快照等操作, 且功能受限 (因android限制)\n\t会在路径下生成kali-arm64目录\n\t用于存储kali环境\n\n\t文档: https://www.kali.org/docs/nethunter/nethunter-rootless",
        "hostfwd": "",
        "default_command": "nethunter -r",
        "custom_command": ""
    }
}'

# Inspector directory
# 检查家目录
check_home_dir(){
    if [ ! -d ${HOME}/.vbn_vms ]; then
        mkdir ${HOME}/.vbn_vms
    fi
}

# The VM file exists
# 虚拟机文件是否存在
vm_file_exits() {
    if [ ! -f "${HOME}/.vbn_vms/${1}" ]; then
        echo -e "\033[33mNo VM is installed\033[0m"
        exit 1
    fi
}

# Obtain all supported VMS
# 获取所有支持的虚拟机
get_vms() {
    vm_list=`echo ${vmlist} | jq -r "keys[]"`
    echo -e "\033[31mVM list:\033[0m"
    for vm_name in $vm_list
    do
        vm_iso=`echo ${vmlist} | jq -r ".${vm_name}.iso"`
        vm_size=`echo ${vmlist} | jq -r ".${vm_name}.actual_size"`
        vm_desc=`echo ${vmlist} | jq -r ".${vm_name}.notes"`
        echo -e "
    \033[32mname\033[0m: \033[31m${vm_name}\033[0m
    \033[32miso\033[0m : \033[31m${vm_iso}\033[0m
    \033[32msize\033[0m: \033[31m${vm_size}\033[0m
    \033[32mdesc\033[0m: \033[36m${vm_desc}\033[0m
"
    done
}

# Install a VM.
# 安装虚拟机
install_vm() {
    check_home_dir
    # check availability
    # 检查可用性
    if echo ${vmlist} | jq -e ".${1}" > /dev/null; then
        # Check whether the VM file exists
        # 检查是否存在虚拟机文件
        if [ "${1}" = "kali" ]; then
             if [ -d "${HOME}/kali-arm64" ]; then
                read -p "The VM file is detected. Do you want to continue downloading? (y/n): " input
                if [ ${input} = "y" ]; then
                    echo -e "\033[33mOverlay download\033[0m"

                else
                    echo -e "\033[33mInvalid selection, exit\033[0m"
                    exit 0
                fi
            fi
        else
            vm_file=`echo ${vmlist} | jq -r ".${1}.filename"`
            if [ -f "${HOME}/.vbn_vms/${vm_file}" ]; then
                read -p "The VM file is detected. Do you want to continue downloading? (y/n): " input
                if [ ${input} = "y" ]; then
                    echo -e "\033[33mOverlay download\033[0m"
                else
                    echo -e "\033[33mInvalid selection, exit\033[0m"
                    exit 0
                fi
            fi
        fi


        # Download process
        download=`echo ${vmlist} | jq -r ".${1}.download"`
        echo -e "\n\033[32m##### Download ${1}\033[0m\n"
        eval ${download}
        if [ $? -eq 0 ]; then
            echo -e "\033[32m##### Download command executed successfully\033[0m"
            echo -e "\033[32m##### installation complete\033[0m"
            echo -e "\033[32m##### You can start running ${1}\033[0m"
            echo -e "\033[32m\n\ncommand: vbn start ${1}\033[0m"
        else
            echo -e "\033[33mDownload command failed\033[0m"
            exit 1
        fi
    else
        echo -e "
\033[33mThe VM is out of range
虚拟机不在支持范围内\033[0m"
    fi
}

check_command

# command prompt
# 指令选项
case ${1} in
    "list")
        # Lists all virtual machines
        # 列出所有虚拟机
        get_vms
        ;;
    "install")
        # Install the specified VM
        # 安装指定虚拟机
        if [ -n "$2" ]; then
            install_vm $2
        else
            echo -e "
Enter the virtual machine you want to install
请输入要安装的虚拟机

install:
    vbn install [name]
"
        fi
        ;;
    "del")
        # Deleting a VM
        # 删除指定虚拟机
        if [ -n "${2}" ]; then
            if echo ${vmlist} | jq -e ".${2}" > /dev/null; then
                if [ "${2}" = "kali" ]; then
                    if [ ! -d "${HOME}/kali-arm64" ]; then
                        echo -e "\033[33mNo VM is installed\033[0m"
                        exit 1
                    else
                        rm -rf "${HOME}/kali-arm64"
                        rm -f "${PREFIX}/bin/nethunter"
                        echo -e "\033[32mThe VM is deleted successfully\033[0m"
                    fi
                fi
                # Check whether the VM file exists
                # 检查是否存在虚拟机文件
                vm_file=`echo ${vmlist} | jq -r ".${2}.filename"`
                vm_file_exits ${vm_file}
                rm -f ${HOME}/.vbn_vms/${vm_file}
                echo -e "\033[32mThe VM is deleted successfully\033[0m"
            else
                echo -e "
\033[33mThe VM is out of range
虚拟机不在支持范围内\033[0m"
            fi
        else
            echo -e "
Specify the VM to be deleted
请指定要删除的虚拟机

start:
    vbn del [name]
"
        fi
        ;;
    "info")
        # View all information about a specified VM
        # 查看指定虚拟机的全部信息
        if [ -n "$2" ] ;then
            if echo ${vmlist} | jq -e ".${2}" > /dev/null; then
                echo ${vmlist} | jq ".${2}"
            else
                echo -e "
\033[33mThe VM is out of range
虚拟机不在支持范围内\033[0m"
            fi
        else
            echo -e "
Specify the virtual machine you want to view
请指定要查看的虚拟机

info:
    vbn info [name]
"
        fi
        ;;
    "start")
        # Start the specified VM
        # 启动指定虚拟机
        if [ -n "$2" ]; then
            if echo ${vmlist} | jq -e ".${2}" > /dev/null; then
                # Check whether the VM file exists
                # 检查是否存在虚拟机文件
                if [ "${2}" = "kali" ]; then
                    if [ ! -d "${HOME}/kali-arm64" ]; then
                        echo -e "\033[33mNo VM is installed\033[0m"
                        exit 1
                    fi
                else
                    vm_file=`echo ${vmlist} | jq -r ".${2}.filename"`
                    vm_file_exits ${vm_file}
                fi
                start_vm=`echo ${vmlist} | jq -r ".${2}.default_command"`
                if [ -n "$3" -a "$3" = "-D" ]; then
                    eval ${start_vm} &> /dev/null &
                else
                    eval ${start_vm}
                fi
            else
                echo -e "
\033[33mThe VM is out of range
虚拟机不在支持范围内\033[0m"
            fi
        else
            echo -e "
Specify the virtual machine you want to start
请指定要启动的虚拟机

start:
    vbn start [name]
"
        fi
        ;;
    "estart")
        # Start a custom VM
        # 自定义启动指定虚拟机
        if [ -n "$2" ]; then
            if echo ${vmlist} | jq -e ".${2}" > /dev/null; then
                # Check whether the VM file exists
                # 检查是否存在虚拟机文件
                if [ "${2}" = "kali" ]; then
                    echo -e "\033[33mOperation kali is not supported\033[0m"
                    exit 0
                fi
                vm_file=`echo ${vmlist} | jq -r ".${2}.filename"`
                vm_file_exits ${vm_file}
                start_vm=`echo ${vmlist} | jq -r ".${2}.custom_command"`
                shift 2
                all_arguments="$@"
                eval ${start_vm} ${all_arguments}
            else
                echo -e "
\033[33mThe VM is out of range
虚拟机不在支持范围内\033[0m"
            fi
        else
            echo -e "
Specify the virtual machine you want to start
请指定要启动的虚拟机和其他自定义参数

start:
    vbn estart [name] [params...]
"
        fi
        ;;
    "stop")
        # Kill the VM process directly. Some operations may not be saved
        # 直接杀死虚拟机进程，有些操作可能会无法保存
        # Shut down the virtual machine as normally as possible
        # 尽可能在虚拟机内正常关机
        if [ -n "$2" ] ;then
            if echo ${vmlist} | jq -e ".${2}" > /dev/null; then
                if [ "${2}" = "kali" ]; then
                    echo -e "\033[33mOperation kali is not supported\033[0m"
                    exit 0
                fi
                vm_file=`echo ${vmlist} | jq -r ".${2}.filename"`
                vm_file_exits ${vm_file}
                vm_pid=`ps -u | grep ${vm_file} | grep -v grep | awk '{print $2}'`
                if [ -z "${vm_pid}" ]; then
                    echo -e "\033[32mThe VM is not started\033[0m"
                else
                    kill ${vm_pid}
                    if [ $? -eq 0 ]; then
                        echo -e "\033[32mKill ${2} success\033[0m"
                    else
                        echo -e "\033[33mKill ${2} failed\033[0m"
                    fi
                fi
            else
                echo -e "
\033[33mThe VM is out of range
虚拟机不在支持范围内\033[0m"
            fi
        else
            echo -e "
Specify the virtual machine you want to stop
请指定要停止的虚拟机

stop:
    vbn stop [name]
"
        fi
        ;;
    "status")
        # Obtain the running status of the VM
        # 获取虚拟机运行状态
        if [ -n "$2" ] ;then
            if echo ${vmlist} | jq -e ".${2}" > /dev/null; then
                if [ "${2}" = "kali" ]; then
                    echo -e "\033[33mOperation kali is not supported\033[0m"
                    exit 0
                fi
                vm_file=`echo ${vmlist} | jq -r ".${2}.filename"`
                vm_file_exits ${vm_file}
                vm_pid=`ps -u | grep ${vm_file} | grep -v grep | awk '{print $2}'`
                if [ -z "${vm_pid}" ]; then
                    echo -e "\033[32mThe VM is not running\033[0m"
                else
                    echo -e "\033[32mThe VM is running, PID: ${vm_pid}\033[0m"
                fi
            else
                echo -e "
\033[33mThe VM is out of range
虚拟机不在支持范围内\033[0m"
            fi
        else
            echo -e "
Specify the virtual machine you want to view
请指定要查看的虚拟机

status:
    vbn status [name]
"
        fi
        ;;
    "snapshot")
        # Vm snapshot management
        # 虚拟机快照管理
        case ${2} in
            "a")
                # Adding a snapshot
                # 添加快照
                if [ -n "$3" ] ;then
                    if echo ${vmlist} | jq -e ".${3}" > /dev/null; then
                        if [ "${3}" = "kali" ]; then
                            echo -e "\033[33mOperation kali is not supported\033[0m"
                            exit 0
                        fi
                        vm_file=`echo ${vmlist} | jq -r ".${3}.filename"`
                        vm_file_exits ${vm_file}
                        if [ -n "$4" ] ;then
                            qemu-img snapshot -c "${4}" "${HOME}/.vbn_vms/${vm_file}"
                            if [ $? -eq 0 ]; then
                                echo -e "\033[32mSnapshot ${3} is successfully add for the VM ${2}\033[0m"
                            else
                                echo -e "\033[33mFailed to add a snapshot\033[0m"
                            fi
                        else
                            echo -e "\033[33mSpecify snapshot name\033[0m"
                            exit 1
                        fi
                    else
                        echo -e "
        \033[33mThe VM is out of range
        虚拟机不在支持范围内\033[0m"
                    fi
                else
                    echo -e "
        Specify the virtual machine that you want to operate
        请指定要操作的虚拟机
        "
                fi
                ;;
            "r")
                # Restore a VM to a snapshot
                # 恢复虚拟机到快照
                if [ -n "$3" ] ;then
                    if echo ${vmlist} | jq -e ".${3}" > /dev/null; then
                        vm_file=`echo ${vmlist} | jq -r ".${3}.filename"`
                        vm_file_exits ${vm_file}
                        if [ -n "$4" ] ;then
                            qemu-img snapshot -a "${4}" "${HOME}/.vbn_vms/${vm_file}"
                            if [ $? -eq 0 ]; then
                                echo -e "\033[32mThe VM ${3} is successfully restored to snapshot ${4}\033[0m"
                            else
                                echo -e "\033[33mSnapshot recovery failure\033[0m"
                            fi
                        else
                            echo -e "\033[33mSpecify snapshot name\033[0m"
                            exit 1
                        fi
                    else
                        echo -e "
        \033[33mThe VM is out of range
        虚拟机不在支持范围内\033[0m"
                    fi
                else
                    echo -e "
        Specify the virtual machine that you want to operate
        请指定要操作的虚拟机
        "
                fi
                ;;
            "d")
                # Deleting a Snapshot
                # 删除快照
                if [ -n "$3" ] ;then
                    if echo ${vmlist} | jq -e ".${3}" > /dev/null; then
                        vm_file=`echo ${vmlist} | jq -r ".${3}.filename"`
                        vm_file_exits ${vm_file}
                        if [ -n "$4" ] ;then
                            qemu-img snapshot -d "${4}" "${HOME}/.vbn_vms/${vm_file}"
                            if [ $? -eq 0 ]; then
                                echo -e "\033[32msuccessfully delete\033[0m"
                            else
                                echo -e "\033[33mfail to delete\033[0m"
                            fi
                        else
                            echo -e "\033[33mSpecify snapshot name\033[0m"
                            exit 1
                        fi
                    else
                        echo -e "
        \033[33mThe VM is out of range
        虚拟机不在支持范围内\033[0m"
                    fi
                else
                    echo -e "
        Specify the virtual machine that you want to operate
        请指定要操作的虚拟机
        "
                fi
                ;;
            "l")
                # View VM snapshots
                # 查看虚拟机的快照
                if [ -n "$3" ] ;then
                    if echo ${vmlist} | jq -e ".${3}" > /dev/null; then
                        vm_file=`echo ${vmlist} | jq -r ".${3}.filename"`
                        vm_file_exits ${vm_file}
                        qemu-img snapshot -l "${HOME}/.vbn_vms/${vm_file}"
                    else
                        echo -e "
        \033[33mThe VM is out of range
        虚拟机不在支持范围内\033[0m"
                    fi
                else
                    echo -e "
        Specify the virtual machine that you want to operate
        请指定要操作的虚拟机
        "
                fi
                ;;
            help|*)
                echo "
prompt:

    a: Adding a snapshot
       为虚拟机添加快照

       vbn snapshot a [name|虚拟机名称] [snapshot_name|快照名称]
    
    r: Restore a VM to a snapshot
       将虚拟机恢复到指定快照

       vbn snapshot r [name|虚拟机名称] [snapshot_name|快照名称]
    
    d: Deleting a Snapshot
       删除虚拟机的某个快照

       vbn snapshot d [name|虚拟机名称] [snapshot_name|快照名称]
    
    l: View VM snapshots
       查看虚拟机所有快照

       vbn snapshot l [name|虚拟机名称]
"
                ;;
        esac
        ;;
    "update")
        # Update the vbn script
        if ! command -v "vbn" &> /dev/null; then
            echo -e "\033[33mvbn instruction path not found\033[0m"
            wget -O update_vbn_cache.sh --no-check-certificate -q ${github_proxy}${vbn_download_url}
            echo -e "Script download complete: "`pwd`'update_vbn_cache.sh'
            echo -e "Install it manually to the specified location"
            exit 0
        else
            echo -e "\033[32mDownload new script\033[0m"
            wget -O update_vbn_cache.sh --no-check-certificate -q ${github_proxy}${vbn_download_url}
            vbn_path=`command -v "vbn"`
            if diff -q update_vbn_cache.sh "${vbn_path}" >/dev/null; then
                echo -e "\033[32mNo updated content, exit...\033[0m"
                exit 0
            else
                mv update_vbn_cache.sh ${vbn_path}
                chmod +x ${vbn_path}
                echo -e "\033[32mupdate completed\033[0m"
            fi
        fi
        ;;
    "version")
        echo "Version: 0.1"
        ;;
    help|*)
        echo "
Personal qemu virtual machine management tool written by Yiming.

usage: vbn [option] [params...]

    params:

        list    : Lists all virtual machines
                  列出所有虚拟机
        
        install : Install the specified VM
                  安装指定虚拟机

                  usage: vbn install [name|虚拟机名称]
        
        del     : Specify the VM to be deleted
                  删除指定虚拟机
                
                  usage: vbn del [name|虚拟机名称]

        info    : View all information about a specified VM
                  查看指定虚拟机的所有信息
                
                  usage: vbn info [name|虚拟机名称]
        
        start   : Start the specified VM
                  启动指定虚拟机

                  usage: vbn start [name|虚拟机名称]

        estart  : Start a custom VM
                  自定义参数启动指定虚拟机

                  usage: vbn estart [name|虚拟机名称] [params...]
        
        stop    : Kill a virtual machine
                  杀死虚拟机

                  usage: vbn stop [name|虚拟机名称]
        
        status  : Obtain the running status of the VM
                  获取虚拟机运行状态

                  usage: vbn stauts [name|虚拟机名称]

        update  : Update the vbn script
                  更新vbn脚本
                  usage: vbn stauts
        
        snapshot: Create a snapshot for a VM
                  为虚拟机添加快照

                  usage: vbn snapshot [a|r|d|l]
                  help : vbn snapshot help
"
        ;;
esac
